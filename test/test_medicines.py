from app import app, db
import pytest

# ‚úÖ 1. –ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç
@pytest.fixture
def client():
    app.config['TESTING'] = True
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
    with app.test_client() as client:
        with app.app_context():
            db.create_all()
        yield client

def test_add_medicine(client):
    response = client.post('/medicines', json={
        "name": "–¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç",
        "expiration_date": "2025-12-31",
        "quantity": 5,
        "description": "–¢–µ—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å"
    })
    response_json = response.get_json()
    assert response.status_code == 201
    assert "–ü—Ä–µ–ø–∞—Ä–∞—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ" in response_json["message"]

# üì• 2. –ü–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –ª—ñ–∫—ñ–≤ (GET /medicines)
def test_get_medicines(client):
    # –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç
    client.post('/medicines', json={
        "name": "–Ü–±—É–ø—Ä–æ—Ñ–µ–Ω",
        "expiration_date": "2025-11-01",
        "quantity": 8,
        "description": "–ñ–∞—Ä–æ–∑–Ω–∏–∂—É–≤–∞–ª—å–Ω–µ"
    })
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫
    response = client.get('/medicines')
    data = response.get_json()

    assert response.status_code == 200
    assert isinstance(data, list)
    assert any(med['name'] == "–Ü–±—É–ø—Ä–æ—Ñ–µ–Ω" for med in data)

# ‚úèÔ∏è 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è (PUT /medicines/<id>)
def test_update_medicine(client):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è
    post_resp = client.post('/medicines', json={
        "name": "–ê–Ω–∞–ª—å–≥—ñ–Ω",
        "expiration_date": "2025-10-10",
        "quantity": 3,
        "description": ""
    })
    med_id = post_resp.get_json()['id']

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è
    put_resp = client.put(f'/medicines/{med_id}', json={
        "quantity": 7
    })

    assert put_resp.status_code == 200
    assert "–õ—ñ–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ" in put_resp.get_json()["message"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
    get_resp = client.get(f'/medicines/{med_id}')
    assert get_resp.get_json()['quantity'] == 7

# ‚ùå 4. –í–∏–¥–∞–ª–µ–Ω–Ω—è (DELETE /medicines/<id>)
def test_delete_medicine(client):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è
    post_resp = client.post('/medicines', json={
        "name": "–ù–æ-—à–ø–∞",
        "expiration_date": "2026-01-01",
        "quantity": 4,
        "description": ""
    })
    med_id = post_resp.get_json()['id']

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è
    del_resp = client.delete(f'/medicines/{med_id}')
    assert del_resp.status_code == 200
    assert "–õ—ñ–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" in del_resp.get_json()["message"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –ª—ñ–∫–∏ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    get_resp = client.get(f'/medicines/{med_id}')
    assert get_resp.status_code == 404

# ‚ùå 5. –ü–æ—Ä–æ–∂–Ω—î —ñ–º‚Äô—è (POST)
def test_post_empty_name(client):
    response = client.post('/medicines', json={
        "name": "",
        "expiration_date": "2025-12-31",
        "quantity": 5,
        "description": "–ë–µ–∑ –Ω–∞–∑–≤–∏"
    })
    assert response.status_code == 400
    assert "–Ü–º‚Äô—è –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –º–∞—î –±—É—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º" in response.get_json()["errors"]

# ‚ùå 6. –ù–∞–∑–≤–∞ ‚Äî —á–∏—Å–ª–æ
def test_post_numeric_name(client):
    response = client.post('/medicines', json={
        "name": "1234",
        "expiration_date": "2025-12-31",
        "quantity": 5,
        "description": "–¶–∏—Ñ—Ä–æ–≤–∞ –Ω–∞–∑–≤–∞"
    })
    assert response.status_code == 400
    assert "–ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —á–∏—Å–ª–æ–º" in response.get_json()["errors"]

# ‚ùå 7. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
def test_post_invalid_date(client):
    response = client.post('/medicines', json={
        "name": "–í–∞–ª—ñ–¥–æ–ª",
        "expiration_date": "31-12-2025",
        "quantity": 5,
        "description": "–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞"
    })
    assert response.status_code == 400
    assert "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ (–æ—á—ñ–∫—É—î—Ç—å—Å—è YYYY-MM-DD)" in response.get_json()["errors"]

# ‚ùå 8. GET –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ ID
def test_get_nonexistent(client):
    response = client.get('/medicines/99999')
    assert response.status_code == 404
    data = response.get_json()
    assert "–õ—ñ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" in data.get("error", "")

# ‚ùå 9. –í—ñ–¥—Å—É—Ç–Ω—ñ–π name:
def test_post_missing_name(client):
    response = client.post('/medicines', json={
        "expiration_date": "2025-12-31",
        "quantity": 5,
        "description": "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
    })
    assert response.status_code == 400
    data = response.get_json()
    assert "–ü–æ–ª–µ 'name' –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ" in data.get("errors", [])

# ‚ùå 10. –í—ñ–¥—Å—É—Ç–Ω—ñ–π expiration_date:
def test_post_missing_expiration_date(client):
    response = client.post('/medicines', json={
        "name": "–ê–º—ñ–∑–æ–Ω",
        "quantity": 5,
        "description": "–ë–µ–∑ –¥–∞—Ç–∏"
    })
    assert response.status_code == 400
    data = response.get_json()
    assert "–ü–æ–ª–µ 'expiration_date' –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ" in data.get("errors", [])

# ‚ùå 11. –í—ñ–¥—Å—É—Ç–Ω—ñ–π quantity:
def test_post_missing_quantity(client):
    response = client.post('/medicines', json={
        "name": "–ê–Ω—Ç–∏–≥—Ä–∏–ø—ñ–Ω",
        "expiration_date": "2025-12-31",
        "description": "–ë–µ–∑ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"
    })
    assert response.status_code == 400
    data = response.get_json()
    assert "–ü–æ–ª–µ 'quantity' –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ" in data.get("errors", [])

# ‚ùå 12. quantity ‚Äî –Ω–µ —á–∏—Å–ª–æ:
def test_post_quantity_not_number(client):
    response = client.post('/medicines', json={
        "name": "–¶–∏—Ç—Ä–∞–º–æ–Ω",
        "expiration_date": "2025-12-31",
        "quantity": "–±–∞–≥–∞—Ç–æ",
        "description": "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å"
    })
    assert response.status_code == 400
    data = response.get_json()
    assert "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º" in data.get("errors", [])

# ‚ùå 13. quantity ‚Äî 0:
def test_post_quantity_zero(client):
    response = client.post('/medicines', json={
        "name": "–¶–∏—Ç—Ä–∞–º–æ–Ω",
        "expiration_date": "2025-12-31",
        "quantity": 0,
        "description": "–ù—É–ª—å–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å"
    })
    assert response.status_code == 400
    data = response.get_json()
    assert "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω—É–ª—å–æ–≤–æ—é" in data.get("errors", [])

# ‚ùå 14. quantity ‚Äî –≤—ñ–¥‚Äô—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è:
def test_post_quantity_negative(client):
    response = client.post('/medicines', json={
        "name": "–¶–∏—Ç—Ä–∞–º–æ–Ω",
        "expiration_date": "2025-12-31",
        "quantity": -5,
        "description": "–í—ñ–¥‚Äô—î–º–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å"
    })
    assert response.status_code == 400
    data = response.get_json()
    assert "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–æ—é" in data.get("errors", [])

# ‚úèÔ∏è 15. –ü–æ—Ä–æ–∂–Ω—ñ–π –æ–ø–∏—Å (–º–∞—î –±—É—Ç–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ):
def test_post_empty_description(client):
    response = client.post('/medicines', json={
        "name": "–¢–µ—Å—Ç –±–µ–∑ –æ–ø–∏—Å—É",
        "expiration_date": "2025-12-31",
        "quantity": 1,
        "description": ""
    })
    assert response.status_code == 201
    data = response.get_json()
    assert "id" in data

# ‚úèÔ∏è 16. –í–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å:
def test_post_large_quantity(client):
    response = client.post('/medicines', json={
        "name": "–¢–µ—Å—Ç –≤–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å",
        "expiration_date": "2025-12-31",
        "quantity": 999999,
        "description": "–ú–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏"
    })
    assert response.status_code == 201
    data = response.get_json()
    assert "id" in data

# ‚úèÔ∏è 17. –î—É–±–ª—ñ (—Ç—ñ –∂ –Ω–∞–∑–≤–∞/–¥–∞—Ç–∞):
def test_post_duplicate(client):
    payload = {
        "name": "–î—É–±–ª—å",
        "expiration_date": "2025-12-31",
        "quantity": 3,
        "description": "–ü–µ—Ä—à–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"
    }

    first = client.post('/medicines', json=payload)
    second = client.post('/medicines', json=payload)

    assert first.status_code == 201
    assert second.status_code == 201  # –Ω–∞—Ä–∞–∑—ñ –¥—É–±–ª—ñ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ
